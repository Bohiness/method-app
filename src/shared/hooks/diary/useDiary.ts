import { useMemo } from 'react';
import { useTranslation } from 'react-i18next';

import { useEveningReflectionHistory } from '@shared/hooks/diary/eveningreflection/useEveningReflection';
import { useJournalHistory } from '@shared/hooks/diary/journal/useJournal';
import { useMood } from '@shared/hooks/diary/mood/useMood';
import { useMoodHistory } from '@shared/hooks/diary/mood/useMoodCheckin';
import { useStartDayHistory } from '@shared/hooks/diary/startday/useStartDay';
import { useDateTime } from '@shared/hooks/systems/datetime/useDateTime';
import { EveningReflectionType } from '@shared/types/diary/eveningreflection/EveningReflectionType';
import { Journal, LocalJournal } from '@shared/types/diary/journal/JournalTypes';
import { MoodCheckin } from '@shared/types/diary/mood/MoodType';
import { StartDayType } from '@shared/types/diary/startday/StartDayType';

// –¢–∏–ø –¥–ª—è –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π —Å —É–∫–∞–∑–∞–Ω–∏–µ–º —Ç–∏–ø–∞ –∑–∞–ø–∏—Å–∏
export type DiaryEntry = {
    id: number | string;
    type: 'mood' | 'startDay' | 'eveningReflection' | 'journal';
    created_at: string;
    data: MoodCheckin | StartDayType | EveningReflectionType | Journal | LocalJournal;
};

// –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ –≤—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ–º
export const diaryHelpers = {
    // –ü–æ–ª—É—á–∏—Ç—å —ç–º–æ–¥–∑–∏ –¥–ª—è —É—Ä–æ–≤–Ω—è –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è
    getMoodEmoji: (level: number): string => {
        const emojis = ['üòû', 'üòî', 'üòê', 'üôÇ', 'üòÑ'];
        const idx = Math.min(Math.max(0, Math.floor(level)), 4);
        return emojis[idx];
    },

    // –ü–æ–ª—É—á–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è
    getMoodDescription: (level: number, t: (key: string) => string, moods: any[] = []): string => {
        // –ï—Å–ª–∏ –µ—Å—Ç—å moods, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∏—Ö
        if (moods && moods.length) {
            // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ –ø–æ —É—Ä–æ–≤–Ω—é
            const mood = moods.find(m => m.level === level);
            if (mood) {
                return t(mood.label);
            }
        }

        // –ó–∞–ø–∞—Å–Ω–æ–π –≤–∞—Ä–∏–∞–Ω—Ç (–µ—Å–ª–∏ moods –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω)
        const descriptions = [
            t('diary.moodcheckin.moods.terrible'),
            t('diary.moodcheckin.moods.bad'),
            t('diary.moodcheckin.moods.normal'),
            t('diary.moodcheckin.moods.good'),
            t('diary.moodcheckin.moods.excellent'),
        ];
        const idx = Math.min(Math.max(0, Math.floor(level) - 1), 4);
        return descriptions[idx];
    },

    // –ü–æ–ª—É—á–∏—Ç—å –∏–º–µ–Ω–∞ —ç–º–æ—Ü–∏–π
    getEmotionNames: (emotionIds: number[], emotions: any): string[] => {
        if (!emotionIds || !emotions) return [];
        return emotionIds
            .map(id => {
                const emotion = emotions.find((e: any) => e.id === id);
                return emotion ? emotion.name : '';
            })
            .filter(Boolean);
    },

    // –ü–æ–ª—É—á–∏—Ç—å –∏–º–µ–Ω–∞ —Ñ–∞–∫—Ç–æ—Ä–æ–≤
    getFactorNames: (factorIds: number[], factors: any): string[] => {
        if (!factorIds || !factors) return [];
        return factorIds
            .map(id => {
                const factor = factors.find((f: any) => f.id === id);
                return factor ? factor.name : '';
            })
            .filter(Boolean);
    },
};

// –û—Å–Ω–æ–≤–Ω–æ–π —Ö—É–∫ useDiary
export const useDiary = () => {
    const { t } = useTranslation();
    const { moods } = useMood();
    const { data: moodCheckins, isPending: isMoodPending, error: moodError } = useMoodHistory();
    const { data: startDayEntries, isPending: isStartDayPending, error: startDayError } = useStartDayHistory();
    const {
        data: eveningReflectionEntries,
        isPending: isEveningReflectionPending,
        error: eveningReflectionError,
    } = useEveningReflectionHistory();
    const { data: journalEntries, isPending: isJournalPending, error: journalError } = useJournalHistory();
    const { formatDateTimeWithTimezoneAndLocale } = useDateTime();

    // –û–±–Ω–æ–≤–ª—è–µ–º diaryHelpers –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ —ç—Ç–æ–≥–æ —Ö—É–∫–∞
    const contextDiaryHelpers = useMemo(() => {
        return {
            ...diaryHelpers,
            getMoodDescription: (level: number, translationFn: (key: string) => string) =>
                diaryHelpers.getMoodDescription(level, translationFn, moods),
        };
    }, [moods]);

    // –û–±—ä–µ–¥–∏–Ω—è–µ–º –≤—Å–µ –∑–∞–ø–∏—Å–∏ –∏ —Å–æ—Ä—Ç–∏—Ä—É–µ–º –∏—Ö –ø–æ –¥–Ω—è–º
    const entriesByDay = useMemo(() => {
        // –°–æ–∑–¥–∞–µ–º –º–∞—Å—Å–∏–≤ –¥–ª—è –≤—Å–µ—Ö –∑–∞–ø–∏—Å–µ–π
        const allEntries: DiaryEntry[] = [];

        // –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–ø–∏—Å–∏ Mood
        if (moodCheckins && Array.isArray(moodCheckins)) {
            moodCheckins.forEach(entry => {
                allEntries.push({
                    id: entry.id,
                    type: 'mood',
                    created_at: entry.created_at,
                    data: entry,
                });
            });
        }

        // –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–ø–∏—Å–∏ StartDay
        if (startDayEntries && Array.isArray(startDayEntries)) {
            startDayEntries.forEach(entry => {
                allEntries.push({
                    id: entry.id,
                    type: 'startDay',
                    created_at: entry.created_at,
                    data: entry,
                });
            });
        }

        // –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–ø–∏—Å–∏ EveningReflection
        if (eveningReflectionEntries && Array.isArray(eveningReflectionEntries)) {
            eveningReflectionEntries.forEach(entry => {
                allEntries.push({
                    id: entry.id,
                    type: 'eveningReflection',
                    created_at: entry.created_at,
                    data: entry,
                });
            });
        }

        // –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–ø–∏—Å–∏ Journal
        if (journalEntries && Array.isArray(journalEntries)) {
            journalEntries.forEach(entry => {
                const journalId = entry.id || ('local_id' in entry ? (entry as LocalJournal).local_id : 0);
                allEntries.push({
                    id: journalId,
                    type: 'journal',
                    created_at: entry.created_at,
                    data: entry,
                });
            });
        }

        // –§–∏–ª—å—Ç—Ä—É–µ–º –∑–∞–ø–∏—Å–∏ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω—é—é –Ω–µ–¥–µ–ª—é
        const now = new Date();
        const weekAgo = new Date();
        weekAgo.setDate(now.getDate() - 7);

        const filtered = allEntries.filter(entry => new Date(entry.created_at) >= weekAgo);

        // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –¥–Ω—è–º
        const groupedByDay = filtered.reduce((acc, entry) => {
            const day = formatDateTimeWithTimezoneAndLocale(entry.created_at, 'dd MMMM');
            if (!acc[day]) acc[day] = [];
            acc[day].push(entry);
            return acc;
        }, {} as Record<string, DiaryEntry[]>);

        // –°–æ—Ä—Ç–∏—Ä—É–µ–º –∑–∞–ø–∏—Å–∏ –≤–Ω—É—Ç—Ä–∏ –∫–∞–∂–¥–æ–≥–æ –¥–Ω—è –ø–æ –≤—Ä–µ–º–µ–Ω–∏ —Å–æ–∑–¥–∞–Ω–∏—è (—Å–Ω–∞—á–∞–ª–∞ –Ω–æ–≤—ã–µ)
        Object.keys(groupedByDay).forEach(day => {
            groupedByDay[day].sort((a, b) => new Date(b.created_at).getTime() - new Date(a.created_at).getTime());
        });

        return groupedByDay;
    }, [moodCheckins, startDayEntries, eveningReflectionEntries, journalEntries, formatDateTimeWithTimezoneAndLocale]);

    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    return {
        entriesByDay,
        isPending: isMoodPending || isStartDayPending || isEveningReflectionPending || isJournalPending,
        error: moodError || startDayError || eveningReflectionError || journalError,
        diaryHelpers: contextDiaryHelpers,
        moods,
    };
};
