// src/shared/api/base/api-client.ts
import NetInfo from '@react-native-community/netinfo';
import { STORAGE_KEYS } from '@shared/constants/STORAGE_KEYS';
import { logger } from '@shared/lib/logger/logger.service';
import { storage } from '@shared/lib/storage/storage.service';
import { tokenService } from '@shared/lib/user/token/token.service';
import axios, { AxiosError, AxiosInstance, AxiosRequestConfig, AxiosRequestHeaders } from 'axios';
import { Platform } from 'react-native';

// –û–ø—Ä–µ–¥–µ–ª—è–µ–º –±–∞–∑–æ–≤—ã–π URL –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã
const getDevelopmentApiUrl = () => {
    if (__DEV__) {
        const devUrl = Platform.select({
            ios: 'http://localhost:8000',
            android: 'http://10.0.2.2:8000',
            default: 'http://localhost:8000',
        });
        console.log('üöÄ Using DEV API URL:', devUrl);
        return devUrl;
    }
    const prodUrl = process.env.EXPO_PUBLIC_API_URL || 'https://api.method.do';
    console.log('üöÄ Using PROD API URL:', prodUrl);
    return prodUrl;
};

const API_URL = getDevelopmentApiUrl();

class ApiClient {
    private instance: AxiosInstance;
    private readonly API_URL: string;
    private authApiService: any = null; // –ë—É–¥–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–∑–∂–µ

    constructor() {
        this.API_URL = API_URL;
        this.instance = axios.create({
            baseURL: this.API_URL,
            timeout: 15000,
            headers: {
                'Content-Type': 'application/json',
                Accept: 'application/json',
            },
        });

        console.log('üì° API Client initialized with URL:', this.API_URL);

        this.setupInterceptors();
    }

    // –ú–µ—Ç–æ–¥ –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ authApiService –ø–æ—Å–ª–µ –µ–≥–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
    setAuthApiService(service: any) {
        this.authApiService = service;
    }

    private setupInterceptors() {
        // –ò–Ω—Ç–µ—Ä—Ü–µ–ø—Ç–æ—Ä –∑–∞–ø—Ä–æ—Å–æ–≤
        this.instance.interceptors.request.use(
            async config => {
                try {
                    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É
                    const netInfo = await NetInfo.fetch();
                    if (!netInfo.isConnected) {
                        logger.error(
                            'No internet connection',
                            'api-client ‚Äì request interceptor',
                            'ApiClient: Request interceptor error:'
                        );
                        throw new Error('No internet connection');
                    }

                    // –ü–æ–ª—É—á–∞–µ–º –∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏
                    const headers = await this.getRequestHeaders();
                    config.headers = { ...config.headers, ...headers } as AxiosRequestHeaders;

                    return config;
                } catch (error) {
                    logger.error(error, 'api-client ‚Äì request interceptor', 'ApiClient: Request interceptor error:');
                    return Promise.reject(error);
                }
            },
            error => {
                logger.error(error, 'api-client ‚Äì request interceptor', 'ApiClient: Request interceptor error:');
                return Promise.reject(error);
            }
        );

        // –ò–Ω—Ç–µ—Ä—Ü–µ–ø—Ç–æ—Ä –æ—Ç–≤–µ—Ç–æ–≤
        this.instance.interceptors.response.use(
            response => response,
            async (error: AxiosError) => {
                try {
                    const originalRequest = error.config;
                    if (!originalRequest) {
                        throw error;
                    }

                    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º 401 –æ—à–∏–±–∫—É
                    if (
                        error.response?.status === 401 &&
                        originalRequest.url !== 'api/token/refresh/' &&
                        this.authApiService
                    ) {
                        try {
                            const tokens = await this.authApiService.refreshTokens();

                            // –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ Authorization
                            originalRequest.headers['Authorization'] = `Bearer ${tokens.access}`;

                            // –ü–æ–≤—Ç–æ—Ä—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –∑–∞–ø—Ä–æ—Å
                            return this.instance(originalRequest);
                        } catch (refreshError) {
                            logger.error(
                                refreshError,
                                'api-client ‚Äì token refresh',
                                'ApiClient: Token refresh failed:'
                            );
                            await tokenService.clearSession();
                            throw refreshError;
                        }
                    }

                    // –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ CSRF –æ—à–∏–±–∫–∏
                    if (error.response?.status === 403) {
                        const errorDetail = (error?.response?.data as any)?.detail || '';

                        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ CSRF –æ—à–∏–±–∫–∏
                        const isCsrfError =
                            errorDetail.includes('CSRF') ||
                            errorDetail.includes('Referer checking failed') ||
                            errorDetail.includes('Origin checking failed') ||
                            errorDetail.includes('CSRF token') ||
                            errorDetail.includes('CSRF cookie not set');

                        if (isCsrfError && this.authApiService) {
                            logger.info(
                                'CSRF error detected, refreshing CSRF token',
                                'api-client ‚Äì response interceptor'
                            );
                            await this.authApiService.getCsrfToken();
                            return this.instance(originalRequest);
                        }
                    }

                    throw error;
                } catch (error) {
                    logger.error(error, 'api-client ‚Äì response interceptor', 'ApiClient: Response interceptor error:');
                    return Promise.reject(error);
                }
            }
        );
    }

    private async getRequestHeaders(): Promise<Record<string, string>> {
        const headers: Record<string, string> = {};

        try {
            // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é —Å–µ—Å—Å–∏—é
            const session = await tokenService.getSession();
            const language = (await storage.get<string>(STORAGE_KEYS.APP_LOCALE)) || 'en';
            const csrfToken = await storage.get<string>(STORAGE_KEYS.CSRF_TOKEN);

            // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –±–∞–∑–æ–≤—ã–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏
            headers['Accept-Language'] = language;

            if (csrfToken) {
                headers['X-CSRFToken'] = csrfToken;
            }

            // –ï—Å–ª–∏ –µ—Å—Ç—å —Å–µ—Å—Å–∏—è, –ø—Ä–æ–≤–µ—Ä—è–µ–º –∏ –æ–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–∫–µ–Ω –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
            if (session?.access) {
                if ((await tokenService.shouldRefreshToken()) && this.authApiService) {
                    const newTokens = await this.authApiService.refreshTokens();
                    headers['Authorization'] = `Bearer ${newTokens.access}`;
                } else if (session.access) {
                    headers['Authorization'] = `Bearer ${session.access}`;
                }
            }

            return headers;
        } catch (error) {
            logger.error(error, 'api-client ‚Äì getRequestHeaders', 'ApiClient: Error getting headers:');
            return headers;
        }
    }

    // GET –∑–∞–ø—Ä–æ—Å
    async get<T>(endpoint: string, config?: AxiosRequestConfig): Promise<T> {
        const netInfo = await NetInfo.fetch();

        if (!netInfo.isConnected) {
            logger.error('No internet connection', 'api-client ‚Äì get', 'ApiClient: Error getting data:');
            throw new Error('No internet connection');
        }

        try {
            const response = await this.instance.get<T>(endpoint, config);
            return response.data;
        } catch (error) {
            logger.error(error, 'api-client ‚Äì get', 'ApiClient: Error getting data:');
            this.handleError(error);
            throw error;
        }
    }

    // POST –∑–∞–ø—Ä–æ—Å
    async post<T>(endpoint: string, data?: any, config?: AxiosRequestConfig): Promise<T> {
        try {
            const response = await this.instance.post<T>(endpoint, data, config);
            return response.data;
        } catch (error) {
            logger.error(error, 'api-client ‚Äì post', 'ApiClient: Error posting data:');
            this.handleError(error);
            throw error;
        }
    }

    // PUT –∑–∞–ø—Ä–æ—Å
    async put<T>(endpoint: string, data?: any, config?: AxiosRequestConfig): Promise<T> {
        try {
            const response = await this.instance.put<T>(endpoint, data, config);
            return response.data;
        } catch (error) {
            logger.error(error, 'api-client ‚Äì put', 'ApiClient: Error putting data:');
            this.handleError(error);
            throw error;
        }
    }

    // PATCH –∑–∞–ø—Ä–æ—Å
    async patch<T>(endpoint: string, data?: any, config?: AxiosRequestConfig): Promise<T> {
        try {
            const response = await this.instance.patch<T>(endpoint, data, config);
            return response.data;
        } catch (error) {
            logger.error(error, 'api-client ‚Äì patch', 'ApiClient: Error patching data:');
            this.handleError(error);
            throw error;
        }
    }

    // DELETE –∑–∞–ø—Ä–æ—Å
    async delete<T>(endpoint: string, config?: AxiosRequestConfig): Promise<T> {
        try {
            const response = await this.instance.delete<T>(endpoint, config);
            return response.data;
        } catch (error) {
            logger.error(error, 'api-client ‚Äì delete', 'ApiClient: Error deleting data:');
            this.handleError(error);
            throw error;
        }
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
    private handleError(error: any) {
        if (axios.isAxiosError(error)) {
            const errorInfo = {
                message: error.message,
                status: error.response?.status,
                data: error.response?.data,
                headers: error.response?.headers,
                config: {
                    url: error.config?.url,
                    method: error.config?.method,
                    baseURL: error.config?.baseURL,
                    headers: error.config?.headers,
                },
            };
            logger.error(errorInfo, 'api-client ‚Äì handleError', 'ApiClient: Error handling error:');
        }
    }
}

export const apiClient = new ApiClient();
